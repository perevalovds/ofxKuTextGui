#GUI description
#variables names: 
#  prefix * means constant which doesn't change after program start (requires restart to apply)
#  prefix - means output value, so user can't change it
#  prefix ~  means hidden value
# button - it's int variable, which is set when button is pressed, needs to set to 0 after reading
# "_" in names is converted to " "

PAGE Settings

dummy SCREEN
COLOR 255,140,255
# const
int *FPS=30 1:100 1,10
int *Screen_W=1024 1:2000 1,10
int *Screen_H=768 1:2000 1,10
RESET_COLOR

# output
float -fps=30 0:100 100,10

TAB
dummy
button Start
checkbox Enabled=1
stringlist Model=Realsense [Realsense,KinectOne,Azure]
checkbox RGB=1
string Path=d:\text.txt

# hidden
int ~hidden_value=0 0:10 1,10

PAGE Conditions
# Conditional UI
# "IF" may contain integers (int, checkbox) and stringlist
# "IF"s can be nested
stringlist option1=UseA [UseA,UseB,UseC]
IF option1==UseA,UseB
checkbox Enable_AB=0
ENDIF
IF option1==UseC
checkbox Enable_C=0
ENDIF

PAGE Templates

TEMPLATE ITEM X Y
dummy {X}{Y}
int Pos{X}{Y}=0 1:10 1,10
ENDTEMPLATE

stringlist Item_Setup=Item11 [Item11,Item12,Item21,Item22]
IF Item_Setup==Item11
ITEM 1 1
ENDIF
IF Item_Setup==Item12
ITEM 1 2
ENDIF
IF Item_Setup==Item21
ITEM 2 1
ENDIF
IF Item_Setup==Item22
ITEM 2 2
ENDIF

TAB

stringlist Projection=WALL [WALL,FLOOR]

TEMPLATE TFILTER p
int {p}_dilate=0 0:16 1,10
int {p}_erode=0 0:16 1,10
int {p}_filter=0 0:400 1,10
int -{p}_raw=0 0:1000000 1,10
#точная подстройка границ, для отключения подстройки выставить в 0
dummy PRECISE
int {p}_X0_CM=0 -1000:1000 1,10
int {p}_X1_CM=0 -1000:1000 1,10
int {p}_Y_CM=0 -1000:1000 1,10
int {p}_SclY=0 -1000:1000 1,10
ENDTEMPLATE

IF Projection==WALL
TFILTER Wall
ENDIF
IF Projection==FLOOR
TFILTER Floor
ENDIF


TAB
# For enabling radio group, call gui.addRadioGroup(...) in C++ code
dummy Radio_Group
checkbox radio_1=1
checkbox radio_2=0
checkbox radio_3=0
dummy Test_Radio_Value
int -radio_value=-1 -1:2 1,10

TAB
dummy Array_Test
int Value_1=1 1:10 1,10
int Value_2=3 1:10 1,10
int Value_3=5 1:10 1,10
# Creates C++ variable vector<int*> PRM Values[3] = {&Value_1, &Value_2, &Value_3}:
array ValuesArray=Value_1,Value_2,Value_3
# Will be put here all values
string -Values_Str=


 
